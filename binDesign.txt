Como usar o comando `hell`

USO:
====
	hell [OPTIONS...] [TARGET] { build | clean | install | uninstall }
[var=value]
	
flags:
	-f file|--file=file	-> especifica o arquivo a ser usado como script
	-j N|--jobs=N	-> especifica o número de 'jobs' a serem executados em
paralelo
	-s|--silent		-> não escreve na stdout
	-v|--verbose	-> mais informações: mostra todos os comandos rodados,
ignorando o campo 'echo'
	-l|--list-targets	-> lista quais as targets que existem no script
	-V|--version	-> mostra versão do software. Deve ficar em '0.1.0' por
bastante tempo xP
	-h|--help		-> mostra ajuda, padrão ou não (assim como no scons, você
pode sobrescrever mensagem de ajuda)
	-H|--help-options	-> mostra ajuda padrão de opções do hell
	-n|--no-exec	-> não executa os comandos especificados, só os mostra
	-t|--timer		-> mostra tempo de execução da build
	-d|--dependency-tree	-> mostra árvore de dependências pra target 
especificada
	-c|--ignore-cyclic-dependencies	-> assina um contrato que diz "estou
ciente de que existem dependências cíclicas e não responsabilizo o criador do
hell se meu pc pegar fogo"



COMANDOS:
=========
ao chamar o hell sem -VhH, ele espera um comando a ser executado. Os comandos
esperados são um desses: build, clean, install, uninstall. Se nenhum comando
for especificado, o padrão usado é 'build'.

- build: executa os comandos de 'build'
- clean: limpa todas as saídas de comandos 'build'
- install: executa os comandos de 'install'
- uninstall: limpa todas as saídas de comandos 'install'



TARGETS:
========
ao chamar o hell sem -VhH, ele espera uma Target a ser construída.
A target nada mais é que uma table que contém as builds. Por padrão, a table
chamada é a própria \_G, a table global do Lua, ou seja, as builds que estão
"de fora".
	Nah, padrão pra quê? Não especificou, constrói tudo!
Pode-se chamar tables dentro de tables usando a própria notação do
Lua, 'table.outra\_table'.
	Chamar tables dentro de tables é um tanto quanto inútil, e mais difícil de
	implementar. Ideia abandonada!
		Ou não, já implementei, enóis xP

`hell yeah clean`, `hell yeah.man`, `hell is.on.fire install`



SCRIPTS:
========
por padrão, hell procura por arquivos de script do hell. Poderia ter os
chamado de 'hellfile' (estilo o makefile), mas soletrei errado e acabou virando
'hellfire' (literalmente "fogo do inferno"), e fiquei com preguiça de
mudar (ou será que a zoeira foi mais forte? xP). Pros que não curtem a ideia,
pode-se usar o 'hellbuild', que é mais pacífico.

Qualquer nome de script pode ser especificado com a flag -f|--file
